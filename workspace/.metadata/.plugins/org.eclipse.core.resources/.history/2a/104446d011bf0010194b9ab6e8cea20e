<?xml version="1.0" encoding="UTF-8"?>
<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-basic.xsd"
           xmlns="http://www.hazelcast.com/schema/config"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <group>
        <name>dev</name>
        <password>dev-pass</password>
    </group>
    <network>
        <port auto-increment="true">5701</port>
        <join>
            <multicast enabled="true">
                <multicast-group>224.2.2.3</multicast-group>
                <multicast-port>54327</multicast-port>
            </multicast>
            <tcp-ip enabled="false">
                <interface>127.0.0.1</interface>
            </tcp-ip>
        </join>
        <interfaces enabled="false">
            <interface>10.10.1.*</interface>
        </interfaces>
    </network>
    <executor-service>
        <core-pool-size>16</core-pool-size>
        <max-pool-size>64</max-pool-size>
        <keep-alive-seconds>60</keep-alive-seconds>
    </executor-service>

    <queue name="queue">
        <max-size-per-jvm>0</max-size-per-jvm>
        <time-to-live-seconds>0</time-to-live-seconds>
    </queue>

	<map name="reports">
	        <!--
	            Number of backups. If 1 is set as the backup-count for example,
	            then all entries of the map will be copied to another JVM for
	            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
	        -->
	        <backup-count>1</backup-count>
	        <!--
	            Maximum number of seconds for each entry to stay in the map. Entries that are
	            older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
	            will get automatically evicted from the map.
	            Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
	        -->
	        <time-to-live-seconds>0</time-to-live-seconds>
	        <!--
	            Maximum number of seconds for each entry to stay idle in the map. Entries that are
	            idle(not touched) for more than <max-idle-seconds> will get
	            automatically evicted from the map.
	            Entry is touched if get, put or containsKey is called.
	            Any integer between 0 and Integer.MAX_VALUE.
	            0 means infinite. Default is 0.
	        -->
	        <max-idle-seconds>0</max-idle-seconds>
	        <!--
	            Valid values are:
	            NONE (no extra eviction, <time-to-live-seconds> may still apply),
	            LRU  (Least Recently Used),
	            LFU  (Least Frequently Used).
	            NONE is the default.
	            Regardless of the eviction policy used, <time-to-live-seconds> will still apply. 
	        -->
	        <eviction-policy>LRU</eviction-policy>
	        <!--
	            Maximum size of the map. When max size is reached,
	            map is evicted based on the policy defined.
	            Any integer between 0 and Integer.MAX_VALUE. 0 means
	            Integer.MAX_VALUE. Default is 0.
	        -->
	        <max-size policy="cluster_wide_map_size">5000</max-size>
	        <!--
	            When max. size is reached, specified percentage of
	            the map will be evicted. Any integer between 0 and 100.
	            If 25 is set for example, 25% of the entries will
	            get evicted.
	        -->
	        <eviction-percentage>25</eviction-percentage>
		</map>
        <!--
           <map-store enabled="true">
                <class-name>au.com.ingdirect.poc.persistence.ElasticSearchMapStore</class-name>
                <write-delay-seconds>10</write-delay-seconds>
                <property name = "host1">10.22.22.11</property>
           </map-store>

        -->
    <!-- Add your own map merge policy implementations here:     
    	<merge-policies>
           	<map-merge-policy name="MY_MERGE_POLICY">
            	<class-name>com.acme.MyOwnMergePolicy</class-name>
        	</map-merge-policy>
    	</merge-policies>
    -->

</hazelcast>